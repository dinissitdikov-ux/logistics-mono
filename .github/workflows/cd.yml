name: CD

on:
  push:
    tags:
      - "v*"

permissions:
  contents: read
  packages: write

jobs:
  docker:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: logistics
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d logistics"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      # 1) Получаем код
      - uses: actions/checkout@v4

      # 2) Node.js для миграций
      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      # 3) Устанавливаем зависимости
      - name: Install deps
        run: npm ci

      # 4) Прогоняем миграции (ждём, пока pg поднимется)
      - name: Run DB migrations
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/logistics
        run: |
          for i in {1..30}; do
            node -e "const { Client } = require('pg'); const c = new Client({ connectionString: process.env.DATABASE_URL }); c.connect().then(()=>c.end().then(()=>process.exit(0))).catch(()=>process.exit(1));" && break
            echo "Postgres is not ready yet... ($i)"
            sleep 2
          done
          node database/setup.js

      # 5) Buildx для сборки Docker-образа
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 6) Логинимся в GHCR
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7) Собираем и пушим образ
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
